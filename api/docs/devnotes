principles:
  - functional first, use classes only when they really help
  - CLEAN is overkill and overuses layering (lasagna code)

layers:
  - db: functions that do database queires only
  - validators: functions that receive the request and validate its data
  - authorizators: functions that receive the request and verify if the requester has authorization for that flow
  - domain: holds functions that do any other nice stuff for us
  - controllers: make flows happen. They receive req and res objects

-- Use cases --

sign up
  - validate form
  - create user (insert on database)
  - send verification mail

create post
  - clean form
  - create post (insert on database)

create comment
  - clean form
  - create comment (insert on database)
  - send notification

edit post
  - clean form
  - edit post (update database)

edit comment
  - clean form
  - edit comment (update database)

react to post
  - update/remove/insert on database
  - create/update notification

follow
  - follow user (update database)
  - create notification

unfollow
  - unfollow user (update database)